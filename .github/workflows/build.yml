name: CI build
on:
  push:
    branches:
    - master
    - "[0-9]+.[0-9]+"
  pull_request:
    branches:
    - master


# Global Settings
env:
  PYTHON_VERSION: "3.9"
  # TODO: cannot update to 1.4 yet, see https://github.com/python-poetry/poetry/issues/7611
  POETRY_VERSION: "1.3.2"
  WINFSP_VERSION: "1.8.20304"
  FORCE_MATURIN_RELEASE: 1

jobs:


#################################################################################

  Quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: pre-commit/action@v2.0.0
        env:
          SKIP: mypy-client


#################################################################################


  linux-build:
    name: 'üêß Linux build'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # pin@v3.0.2
        with:
            submodules: true
      - name: 'Set up Python'
        uses: actions/setup-python@d09bd5e6005b175076f227b13d9730d56e9dcfcb  # pin@v4.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: 'Install fuse'
        run: sudo apt-get install -y libfuse2
      - name: 'Install tools'
        working-directory: client
        run: |
          set -eux
          python --version
          python -m pip install --user pipx
          pipx install poetry==${{ env.POETRY_VERSION }}
          poetry --version
      - name: '[Client] Install Project'
        run: poetry install -v
        working-directory: client
      - name: '[Client] Check fuse'
        run: poetry run python -c "import fuse"
        working-directory: client
      - name: '[Client] Run Tests'
        run: poetry run py.test client_tests
        timeout-minutes: 10
        working-directory: client
      - name: '[Server] Install Project'
        run: poetry install -v
        working-directory: server
      - name: '[Server] Run Tests'
        run: poetry run py.test server_tests
        timeout-minutes: 10
        working-directory: server
      - name: '[Quality] Run pre-commit with mypy-client'
        uses: pre-commit/action@v2.0.0


#################################################################################


  windows-build:
    name: 'üèÅ Windows build'
    runs-on: windows-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # pin@v3.0.2
        with:
            submodules: true
      - name: 'Set up Python'
        uses: actions/setup-python@d09bd5e6005b175076f227b13d9730d56e9dcfcb  # pin@v4.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: 'Setup env'
        shell: bash
        run: |
          set -eux
          python --version
          python -m pip install --user pipx
          pipx install poetry==${{ env.POETRY_VERSION }}
          poetry --version
        working-directory: client
      - name: 'Install WinFSP'
        shell: bash
        run: |
          set -eux
          choco install -y --limit-output winfsp --version=${{ env.WINFSP_VERSION }}
        working-directory: client
      - name: 'Install project'
        run: poetry install -v
        working-directory: client
      - name: 'Run tests'
        run: poetry run py.test client_tests
        timeout-minutes: 10
        working-directory: client


#################################################################################


  windows-packing:
    name: 'üèÅ Windows packaging'
    runs-on: windows-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # pin@v3.0.2
        with:
            submodules: true
      - name: 'Set up Python'
        uses: actions/setup-python@d09bd5e6005b175076f227b13d9730d56e9dcfcb  # pin@v4.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: 'Setup env'
        shell: bash
        run: |
          set -eux
          python --version
          python -m pip install --user pipx
          pipx install poetry==${{ env.POETRY_VERSION }}
          poetry --version
        working-directory: client
      - name: Freeze Parsec
        run: python freeze_program.py ../../client
        working-directory: packaging/windows/
      - name: 'Upload installer as artifact'
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # pin v3.1.0
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-installer-content
          path: |
            packaging/windows/build/manifest.ini
            packaging/windows/build/install_files.nsh
            packaging/windows/build/uninstall_files.nsh
            packaging/windows/build/resana_secure-*/
            packaging/windows/build/winfsp-*
