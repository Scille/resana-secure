name: CI build
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master


# Global Settings
env:
  PYTHON_VERSION: "3.9"
  POETRY_VERSION: 1.3.2
  WINFSP_VERSION: 1.8.20304
  FORCE_MATURIN_RELEASE: 1

jobs:

  # Github PR merging is configured to only require this job to pass
  ci-is-happy:
    name: ⭐ CI is happy ⭐
    needs:
      - linux-check-test-build
      - windows-build
      - windows-packaging
    runs-on: ubuntu-latest
    if: always()
    # Just a fail-safe timeout, see the fine grain per-task timeout instead
    timeout-minutes: 2
    steps:
      # The Needs context value contains only:
      # - the final state of a job (if it fails or not)
      # - its output (currently, none of our jobs are configuring outputs variable)
      #
      # https://docs.github.com/en/actions/learn-github-actions/contexts#needs-context
      - name: Debug the needs context values
        env:
          NEEDS: ${{ toJSON(needs) }}
        run: printenv NEEDS

      - name: We're very sorry
        run: |
          echo "Oh No, we have jobs that have failed/cancelled/skipped :("
          exit 21
        if: >-
          contains(needs.*.result, 'failure')
          || contains(needs.*.result, 'skipped')
          || contains(needs.*.result, 'cancelled')
          || ! contains(needs.*.result, 'success')

      - name: It's showtime
        run: echo "My job here is done !"

  #################################
  #           Linux               #
  #################################

  linux-check-test-build:
    name: 🐧 Linux check, test & build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3 # pin@v3.0.2
        with:
          submodules: true

      - name: Install fuse
        run: sudo apt-get install -y libfuse2

      - name: Install poetry-${{ env.POETRY_VERSION }}
        shell: bash
        run: |
          set -eux
          set -o pipefail
          export POETRY_HOME="$HOME/.poetry"
          mkdir -p "$POETRY_HOME"
          if ! curl -sSL https://install.python-poetry.org | python3 - --version=${{ env.POETRY_VERSION }}; then
            tail -n +0 ${{ github.workspace }}/poetry-installer*.log
            exit 3
          fi
          echo "$POETRY_HOME/bin" >> "$GITHUB_PATH"

      - name: Set up Python
        uses: actions/setup-python@57ded4d7d5e986d7296eab16560982c6dd7c923b  # pin@v4.6.0
        id: setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configure poetry to use the installed python
        shell: bash
        run: poetry env use ${{ steps.setup-python.outputs.python-path }}

      - name: Debug python & poetry versions
        run: |
          python --version
          poetry --version

      - name: "[Client] Install Project"
        run: poetry install -v
        working-directory: client

      - name: "[Client] Check fuse"
        run: poetry run python -c "import fuse"
        working-directory: client

      - name: "[Client] Run Tests"
        run: poetry run py.test client_tests
        timeout-minutes: 10
        working-directory: client

      - name: "[Server] Install Project"
        run: poetry install -v
        working-directory: server

      - name: "[Server] Run Tests"
        run: poetry run py.test server_tests
        timeout-minutes: 10
        working-directory: server

      - name: "[Quality] Run pre-commit with mypy-client"
        uses: pre-commit/action@v3.0.0


  #################################
  #           Windows             #
  #################################

  windows-build:
    name: 🏁 Windows build
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3 # pin@v3.0.2
        with:
          submodules: true

      - name: Install poetry-${{ env.POETRY_VERSION }}
        shell: bash
        run: |
          set -eux
          export POETRY_HOME=${APPDATA}/.poetry
          curl -sSL https://install.python-poetry.org \
            | python3 - --version=${{ env.POETRY_VERSION }}
          echo "${APPDATA}\.poetry\bin" >> "$GITHUB_PATH"

      - name: Set up Python
        uses: actions/setup-python@57ded4d7d5e986d7296eab16560982c6dd7c923b  # pin@v4.6.0
        id: setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configure poetry to use the installed python
        shell: pwsh
        run: poetry env use ${{ steps.setup-python.outputs.python-path }}

      - name: Debug python & poetry versions
        shell: bash
        run: |
          python --version
          poetry --version

      - name: Install WinFSP
        shell: bash
        run: |
          set -eux
          choco install -y --limit-output winfsp --version=${{ env.WINFSP_VERSION }}
        working-directory: client

      - name: Install project
        run: poetry install -v
        working-directory: client

      - name: Run tests
        run: poetry run py.test client_tests
        timeout-minutes: 10
        working-directory: client

  windows-packaging:
    name: 🏁 Windows packaging
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3 # pin@v3.0.2
        with:
          submodules: true

      - name: Install poetry-${{ env.POETRY_VERSION }}
        shell: bash
        run: |
          set -eux
          export POETRY_HOME=${APPDATA}/.poetry
          curl -sSL https://install.python-poetry.org \
            | python3 - --version=${{ env.POETRY_VERSION }}
          echo "${APPDATA}\.poetry\bin" >> "$GITHUB_PATH"

      - name: Set up Python
        uses: actions/setup-python@57ded4d7d5e986d7296eab16560982c6dd7c923b  # pin@v4.6.0
        id: setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configure poetry to use the installed python
        shell: pwsh
        run: poetry env use ${{ steps.setup-python.outputs.python-path }}

      - name: Debug python & poetry versions
        shell: bash
        run: |
          python --version
          poetry --version

      - name: Freeze Parsec
        run: python freeze_program.py ../../client
        working-directory: packaging/windows/

      - name: Upload installer as artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin v3.1.2
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-installer-content
          path: |
            packaging/windows/build/manifest.ini
            packaging/windows/build/install_files.nsh
            packaging/windows/build/uninstall_files.nsh
            packaging/windows/build/resana_secure-*/
            packaging/windows/build/winfsp-*
