name: CI build
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master


# Global Settings
env:
  PYTHON_VERSION: "3.9"
  WINFSP_VERSION: 1.8.20304
  FORCE_MATURIN_RELEASE: 1

jobs:

  # Github PR merging is configured to only require this job to pass
  ci-is-happy:
    name: ‚≠ê CI is happy ‚≠ê
    needs:
      - linux-check-test-build
      - windows-build
      - windows-packaging
    runs-on: ubuntu-latest
    if: always()
    # Just a fail-safe timeout, see the fine grain per-task timeout instead
    timeout-minutes: 2
    steps:
      # The Needs context value contains only:
      # - the final state of a job (if it fails or not)
      # - its output (currently, none of our jobs are configuring outputs variable)
      #
      # https://docs.github.com/en/actions/learn-github-actions/contexts#needs-context
      - name: Debug the needs context values
        env:
          NEEDS: ${{ toJSON(needs) }}
        run: printenv NEEDS

      - name: We're very sorry
        run: |
          echo "Oh No, we have jobs that have failed/cancelled/skipped :("
          exit 21
        if: >-
          contains(needs.*.result, 'failure')
          || contains(needs.*.result, 'skipped')
          || contains(needs.*.result, 'cancelled')
          || ! contains(needs.*.result, 'success')

      - name: It's showtime
        run: echo "My job here is done !"

  #################################
  #           Linux               #
  #################################

  linux-check-test-build:
    name: üêß Linux check, test & build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3 # pin@v3.0.2
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v4  # pin@v4.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install fuse
        run: sudo apt-get install -y libfuse2

      - name: Install tools
        working-directory: client
        run: |
          set -eux
          python --version
          python -m pip install --user pipx
          pipx install poetry
          poetry --version

      - name: "[Client] Install Project"
        run: poetry install -v
        working-directory: client

      - name: "[Client] Check fuse"
        run: poetry run python -c "import fuse"
        working-directory: client

      - name: "[Client] Run Tests"
        run: poetry run py.test client_tests
        timeout-minutes: 10
        working-directory: client

      - name: "[Server] Install Project"
        run: poetry install -v
        working-directory: server

      - name: "[Server] Run Tests"
        run: poetry run py.test server_tests
        timeout-minutes: 10
        working-directory: server

      - name: "[Quality] Run pre-commit with mypy-client"
        uses: pre-commit/action@v3.0.0


  #################################
  #           Windows             #
  #################################

  windows-build:
    name: üèÅ Windows build
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3 # pin@v3.0.2
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v4  # pin@v4.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup env
        shell: bash
        run: |
          set -eux
          python --version
          python -m pip install --user pipx
          pipx install poetry
          poetry --version
        working-directory: client

      - name: Install WinFSP
        shell: bash
        run: |
          set -eux
          choco install -y --limit-output winfsp --version=${{ env.WINFSP_VERSION }}
        working-directory: client

      - name: Install project
        run: poetry install -v
        working-directory: client

      - name: Run tests
        run: poetry run py.test client_tests
        timeout-minutes: 10
        working-directory: client

  windows-packaging:
    name: üèÅ Windows packaging
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3 # pin@v3.0.2
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v4  # pin@v4.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup env
        shell: bash
        run: |
          set -eux
          python --version
          python -m pip install --user pipx
          pipx install poetry
          poetry --version
        working-directory: client

      - name: Freeze Parsec
        run: python freeze_program.py ../../client
        working-directory: packaging/windows/

      - name: Upload installer as artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin v3.1.2
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-installer-content
          path: |
            packaging/windows/build/manifest.ini
            packaging/windows/build/install_files.nsh
            packaging/windows/build/uninstall_files.nsh
            packaging/windows/build/resana_secure-*/
            packaging/windows/build/winfsp-*
